#!/usr/bin/perl
#
# Copyright 2019 CentralNic Ltd. This program is free software; you can
# redistribute it and/or modify it under the same terms as Perl itself.
#
use Config::Simple;
use DBI;
use Getopt::Long;
use IO::File;
use List::Util qw(min max);
use Net::DNS;
use POSIX qw(setsid strftime floor);
use Pod::Usage;
use Sys::Hostname;
use Sys::Syslog qw(:standard :macros);
use Time::HiRes qw(time sleep);
use threads;
use constant NAME => 'rdnsd';
use vars (
	'$VERSION',	# application version number
	'$CFILE',	# default config file location
	'$DEBUG',	# debug flag
	'$HELP',	# help flag
	'$PACKET',	# pre-compiled query packet
	'$CONF',	# configuration
	'@SERVERS',	# list of servers to monitor
	'$RELOAD',	# config reload flag (set by SIGHUP handler)
	'$REFRESH',	# server list refresh timer
	'$CACHE',	# cache of server IPs
	'$STATS',	# statistics data
	'$UPDATED',	# time of last update of stats
	'@PROTOCOLS',	# supported transport protocols
	'$GROUPS',	# server groups
);
use strict;

@PROTOCOLS = qw(udp tcp);

$VERSION = '0.10';

$CFILE = sprintf('/etc/%s/%s.conf', NAME, NAME);

$CACHE = {};

#
# get config from command line:
#
GetOptions(
	'config=s' => \$CFILE,
	'debug'    => \$DEBUG,
	'help'     => \$HELP,
);

pod2usage('-verbose' => 99, '-sections' => 'USAGE|OPTIONS') if ($HELP);

load_config();

#
# sense check
#
if (!$CONF->{'Database'} && !$CONF->{'StatsFile'}) {
	die("ERROR: config must include either a 'Database' or 'StatsFile' directive.\n");

} elsif ($CONF->{'Servers'} && $CONF->{'Domains'}) {
	die("ERROR: Both 'Servers' and 'Domains' are present in config: please choose one or the other.\n");

} elsif ($CONF->{'Timeout'} > $CONF->{'Loop'}) {
	die(sprintf(
		"ERROR: value for 'Timeout' (%u) must not be more  than 'Loop' (%u).\n",
		$CONF->{'Timeout'},
		$CONF->{'Loop'}
	));

} elsif ($CONF->{'UpdateInterval'} <= $CONF->{'Loop'} * $CONF->{'Timeout'}) {
	die(sprintf(
		"ERROR: value for 'UpdateInterval' (%u) must be more than 'Loop' x 'Timeout' (%u x %u = %u).\n",
		$CONF->{'UpdateInterval'},
		$CONF->{'Loop'},
		$CONF->{'Timeout'},
		($CONF->{'Loop'} * $CONF->{'Timeout'})
	));

} elsif ($CONF->{'UpdateInterval'} <= 3 * $CONF->{'Loop'} * $CONF->{'Timeout'}) {
	warn(sprintf(
		"WARNING: value for 'UpdateInterval' (%u) should be at least three times the value of 'Loop' x 'Timeout' (3 x %u x %u = %u)\n",
		$CONF->{'UpdateInterval'},
		$CONF->{'Loop'},
		$CONF->{'Timeout'},
		(3 * $CONF->{'Loop'} * $CONF->{'Timeout'})
	));
}

initialise_database() if ($CONF->{'Database'});

openlog(NAME, 'pid', LOG_DAEMON);
setlogmask(LOG_UPTO(LOG_DEBUG));

debug('%s v%s starting', NAME, $VERSION);

update_serverlist();

die('no servers found') if (scalar(@SERVERS) < 1);

unless ($DEBUG) {
	if (fork() > 0) {
		exit 0;

	} else {
		setsid();
		chdir('/');
		$0 = sprintf('[%s]', NAME);

	}
}

if (!open(PIDFILE, '>'.$CONF->{'PidFile'})) {
	die("Error opening '$CONF->{'PidFile'}': $!");

} else {
	print PIDFILE $$."\n";
	close(PIDFILE);

	debug('wrote PID to %s', $CONF->{'PidFile'});
}

#
# the SIGHUP handler sets the $RELOAD flag and the $REFRESH timer so we reload
# our config before the next loop
#
$SIG{'HUP'} = sub {
	debug('received SIGHUP');
	$RELOAD = 1;
	$REFRESH = 0;
};

$UPDATED = time();

$STATS = {};

debug('entering main loop');
main_loop() while (1);

exit(1);

sub main_loop {
	eval {
		update_serverlist() if ($REFRESH <= time());

		load_config() if ($RELOAD);

		my $t0 = time();

		my $threads = {};
		foreach my $ns (sort(@SERVERS)) {
			#
			# resolve nameserver to IP addresses in the main thread
			#
			my @ips = resolve($ns, $CONF->{'AddressFamily'});

			if (scalar(@ips) < 1) {
				debug('unable to resolve %s', uc($ns));

			} else {
				foreach my $proto (@PROTOCOLS) {
					$threads->{$ns}->{$proto} = threads->create(\&time_query, ($CONF->{'AddressFamily'}, $proto, @ips));
				}
			}
		}

		#
		# gather threads
		#
		foreach my $ns (keys(%{$threads})) {
			foreach my $proto (keys(%{$threads->{$ns}})) {
				$STATS->{$ns}->{$proto}->{'count'}++;

				my $dt = $threads->{$ns}->{$proto}->join;

				if ($dt) {
					$STATS->{$ns}->{$proto}->{'time'} += $dt;
					$STATS->{$ns}->{$proto}->{'success'}++;
					push(@{$STATS->{$ns}->{$proto}->{'times'}}, $dt);
				}
			}
		}

		update_stats() if (time() - $UPDATED >= $CONF->{'UpdateInterval'});

		my $dt = (time() - $t0);

		sleep($CONF->{'Loop'}-$dt) if ($dt < $CONF->{'Loop'});
	};
}

#
# send a DNS query and return the amount of time it took (or undef if no
# answer was received within the timeout window)
#
# it accepts multiple IP addresses since servers may be multi-homed.
# this function should only ever receive IP addresses as arguments,
# otherwise the RTT will erroneously include the time taken to resolve
# the name
#
sub time_query {
	my ($family, $proto, @ips) = @_;

	if (scalar(@ips) < 1) {
		warn('received an empty set of IP addresses');
		return undef;

	} else {
		my $resolver = Net::DNS::Resolver->new(
			'nameservers'		=> \@ips,		# IP addresses to query
			'retry'			=> 0,			# no retries
			'igntc'			=> 1,			# ignore TC bit on UDP queries so we don't do a TCP query
			'usevc'			=> ('tcp' eq $proto),	# enable/disable TCP
			'udp_timeout'		=> $CONF->{'Timeout'},	# Set timeout
			'tcp_timeout'		=> $CONF->{'Timeout'},	# Set timeout
			'persistent_udp'	=> 0,			# Disable persistent connections
			'persistent_tcp'	=> 0,			# Disable persistent connections
			'force_v4'		=> (4 == $family),	# Force IPv4
			'force_v6'		=> (6 == $family),	# Force IPv6
		);

		my $result;

		my $t0 = time();

		eval {
			$result = $resolver->send($PACKET);
		};

		my $dt = (time() - $t0);

		if (!$result || (defined($CONF->{'ResponseCode'}) && $result->header->rcode ne $CONF->{'ResponseCode'})) {
			return undef;

		} else {
			return $dt;

		}
	}
}

sub debug {
	my ($fmt, @args) = @_;
	my $message = sprintf($fmt, @args);
	syslog(LOG_DEBUG, $message);
	print(STDERR $message."\n") if ($DEBUG);
}

sub load_config {
	debug('loading configuration from %s', $CFILE);

	my $ini = Config::Simple->new('syntax' => 'simple');
	$ini->read($CFILE);

	#
	# copy values and set defaults for missing entries
	#
	$CONF->{'NodeID'}		= $ini->param('NodeID')			|| hostname();
	$CONF->{'UpdateInterval'}	= $ini->param('UpdateInterval')		|| 300;
	$CONF->{'PidFile'}		= $ini->param('PidFile')		|| sprintf('/var/run/%s/%s.pid', NAME, NAME);
	$CONF->{'Database'}		= $ini->param('Database')		|| undef;
	$CONF->{'DBTable'}		= $ini->param('DBTable')		|| NAME;
	$CONF->{'DBUsername'}		= $ini->param('DBUsername')		|| undef;
	$CONF->{'DBPassword'}		= $ini->param('DBPassword')		|| undef;
	$CONF->{'Percentile'}		= $ini->param('Percentile')		|| undef;
	$CONF->{'AddressFamily'}	= $ini->param('AddressFamily')		|| 4;
	$CONF->{'Loop'}			= $ini->param('Loop')			|| 3;
	$CONF->{'Timeout'}		= $ini->param('Timeout')		|| 1;
	$CONF->{'Recurse'}		= $ini->param('Recurse') eq 'true'	|| undef;
	$CONF->{'Question'}		= $ini->param('Question')		|| '. A IN';
	$CONF->{'ResponseCode'}		= $ini->param('ResponseCode')		|| undef;
	$CONF->{'Servers'}		= $ini->param('Servers')		|| undef;
	$CONF->{'Domains'}		= $ini->param('Domains')		|| undef;

	#
	# deprecated options
	#
	$CONF->{'Protocol'}		= $ini->param('Protocol')		|| 'udp';
	$CONF->{'StatsFile'}		= $ini->param('StatsFile')		|| undef;

	#
	# pre-compile question packet
	#
	my @question = split(/\s+/, $CONF->{'Question'});
	$PACKET = Net::DNS::Packet->new(@question);
	$PACKET->header->rd($CONF->{'Recurse'});

	$RELOAD = undef;
}

sub update_serverlist {
	$GROUPS = {};

	if ($CONF->{'Servers'}) {
		#
		# statically defined server list, never refresh
		#
		$REFRESH = -1;

		@SERVERS = ('ARRAY' eq ref($CONF->{'Servers'}) ? @{$CONF->{'Servers'}} : split(/\s*,\s*/, $CONF->{'Servers'}));

	} else {
		@SERVERS = ();

		my $resolver = Net::DNS::Resolver->new;

		#
		# start with a high value
		#
		my $ttl = ~0;

		my @domains = ('ARRAY' eq ref($CONF->{'Domains'}) ? @{$CONF->{'Domains'}} : split(/\s*,\s*/, $CONF->{'Domains'}));
		foreach my $domain (@domains) {
			my $answer = $resolver->query('_dns._udp.'.$domain, 'SRV');
			if ($answer) {
				foreach my $rr (grep { 'SRV' eq $_->type } $answer->answer) {
					push(@SERVERS, lc($rr->target));
					$GROUPS->{lc($rr->target)} = lc($domain);

					#
					# reduce TTL if we see a lower value
					#
					$ttl = $rr->ttl if ($rr->ttl < $ttl);
				}
			}
		}

		#
		# if no servers return, retry after 60s, otherwise,
		# refresh after the shortest TTL observed in the answer
		# section
		#
		$REFRESH = time() + (scalar(@SERVERS) < 1 ? 60 : $ttl);
		debug('server list updated; will be refreshed at %s', scalar(localtime($REFRESH)));
	}
}

sub update_stats {

	my ($db, $sth);
	if ($CONF->{'Database'}) {
		$db = db_connect();

		my @cols = qw(node_id start_time end_time host group family proto count success rate min_time time max_time percentile_time);
		$sth = $db->prepare(sprintf(
			'INSERT INTO %s (%s) VALUES (?%s)',
			$db->quote_identifier($CONF->{'DBTable'}),
			join(',', map { $db->quote_identifier($_) } @cols),
			(',?' x (scalar(@cols)-1))
		));
	}

	my $fh;
	if ($CONF->{'StatsFile'}) {
		$fh = IO::File->new($CONF->{'StatsFile'}, 'w');
	}

	foreach my $ns (sort(keys(%{$STATS}))) {
		foreach my $proto (keys(%{$STATS->{$ns}})) {
			#
			# no stats for this server, ignore it
			#
			next if ($STATS->{$ns}->{$proto}->{'count'} < 1);

			#
			# compute success rate and average RTT
			#
			my $rate = ($STATS->{$ns}->{$proto}->{'success'} / $STATS->{$ns}->{$proto}->{'count'});
			my $time = floor(1000 * $STATS->{$ns}->{$proto}->{'time'} / $STATS->{$ns}->{$proto}->{'count'});

			my @times = ($rate > 0 ? sort(@{$STATS->{$ns}->{$proto}->{'times'}}) : ());

			my $ptime;
			if ($CONF->{'Percentile'}) {
				#
				# find the position in the array which corresponds to the percentile
				#
				my $pos = floor(scalar(@times) * $CONF->{'Percentile'} / 100) - 1;

				#
				# compute percentile time
				#
				$ptime = floor(1000 * $times[$pos]);
			}

			if ($sth) {
				$sth->execute(
					lc($CONF->{'NodeID'}),
					strftime('%Y-%m-%d %H:%M:%S', localtime($UPDATED)),
					strftime('%Y-%m-%d %H:%M:%S', localtime(time())),
					lc($ns),
					lc($GROUPS->{$ns}) || 'default',
					int($CONF->{'AddressFamily'}),
					lc($proto),
					int($STATS->{$ns}->{$proto}->{'count'}),
					int($STATS->{$ns}->{$proto}->{'success'}),
					sprintf('%f', $rate),
					int(1000 * min(@times)),
					int($time),
					int(1000 * max(@times)),
					($ptime ? int($ptime) : undef),
				);
			}

			if ($fh && $proto eq $CONF->{'Protocol'}) {
				my $line = sprintf('%s %0.2f %d', $ns, $rate, $time);
				$line .= sprintf(' %d', $ptime) if defined($ptime);

				$fh->print($line."\n");
			}
		}
	}

	if ($db) {
		$db->commit;
		$db->disconnect;
		debug("updated '%s'", $CONF->{'Database'});
	}

	if ($fh) {
		$fh->close;
		debug("wrote stats to '%s'", $CONF->{'StatsFile'});
	}

	if ($db || $fh) {
		$UPDATED = time();
		$STATS = {};
	}
}

sub db_connect {
	my $dsn;
	if ($CONF->{'Database'} =~ /^dbi:/i) {
		$dsn = $CONF->{'Database'};

	} else {
		$dsn = 'dbi:SQLite:dbname='.$CONF->{'Database'};

	}

	return DBI->connect(
		$dsn,
		$CONF->{'DBUsername'},
		$CONF->{'DBPassword'},
		{
			'RaiseError' => 1,
			'AutoCommit' => 0,
		}
	);
}

sub initialise_database {

	my $driver;
	if ($CONF->{'Database'} =~ /^dbi:([^\:]+)/i) {
		$driver = lc($1);

	} else {
		$driver = 'sqlite';

	}

	if ('sqlite' eq $driver) {
		initialise_sqlite();

	} elsif ('mysql'eq $driver) {
		initialise_mysql();

	} else {
		die("unsupported database '$driver'");

	}
}

sub initialise_sqlite {
	my $db = db_connect();

	my $tbl = $db->quote_identifier($CONF->{'DBTable'});

	$db->do(sprintf("CREATE TABLE IF NOT EXISTS %s (
		`id`			INTEGER NOT NULL PRIMARY KEY,
		`node_id`		VARCHAR(255) NOT NULL,
		`start_time`		DATETIME NOT NULL,
		`end_time`		DATETIME NOT NULL,
		`host`			VARCHAR(255) NOT NULL,
		`group`			VARCHAR(255) NOT NULL DEFAULT 'default',
		`family`		INTEGER UNSIGNED NOT NULL DEFAULT 4,
		`proto`			CHAR(3) NOT NULL DEFAULT 'udp',
		`count`			INTEGER UNSIGNED NOT NULL,
		`success`		INTEGER UNSIGNED NOT NULL,
		`rate`			DECIMAL UNSIGNED NOT NULL,
		`min_time`		INTEGER UNSIGNED NOT NULL,
		`time`			INTEGER UNSIGNED NOT NULL,
		`max_time`		INTEGER UNSIGNED NOT NULL,
		`percentile_time`	INTEGER UNSIGNED DEFAULT NULL
	)", $tbl));

	$db->do(sprintf('CREATE INDEX IF NOT EXISTS `node_idx`		ON %s(`node_id`)', $tbl));
	$db->do(sprintf('CREATE INDEX IF NOT EXISTS `host_idx`		ON %s(`host`)', $tbl));
	$db->do(sprintf('CREATE INDEX IF NOT EXISTS `group_idx`		ON %s(`group`)', $tbl));
	$db->do(sprintf('CREATE INDEX IF NOT EXISTS `start_time_idx`	ON %s(`start_time`)', $tbl));
	$db->do(sprintf('CREATE INDEX IF NOT EXISTS `end_time_idx`	ON %s(`end_time`)', $tbl));
	$db->do(sprintf('CREATE INDEX IF NOT EXISTS `family_idx`	ON %s(`family`)', $tbl));
	$db->do(sprintf('CREATE INDEX IF NOT EXISTS `proto_idx`		ON %s(`proto`)', $tbl));

	$db->commit;

	$db->disconnect();

	debug('initialised database');
}

sub initialise_mysql {
	my $db = db_connect();

	my $tbl = $db->quote_identifier($CONF->{'DBTable'});

	$db->do(sprintf("CREATE TABLE IF NOT EXISTS %s (
		`id`			BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
		`node_id`		VARCHAR(255) NOT NULL,
		`start_time`		DATETIME NOT NULL,
		`end_time`		DATETIME NOT NULL,
		`host`			VARCHAR(255) NOT NULL,
		`group`			VARCHAR(255) NOT NULL DEFAULT 'default',
		`family`		TINYINT(1) UNSIGNED NOT NULL DEFAULT 4,
		`proto`			CHAR(3) NOT NULL DEFAULT 'udp',
		`count`			INTEGER UNSIGNED NOT NULL,
		`success`		INTEGER UNSIGNED NOT NULL,
		`rate`			DECIMAL UNSIGNED NOT NULL,
		`min_time`		INTEGER UNSIGNED NOT NULL,
		`time`			INTEGER UNSIGNED NOT NULL,
		`max_time`		INTEGER UNSIGNED NOT NULL,
		`percentile_time`	INTEGER UNSIGNED DEFAULT NULL
	)", $tbl));

	$db->do(sprintf('CREATE INDEX IF NOT EXISTS `node_idx`		ON %s(`node_id`)', $tbl));
	$db->do(sprintf('CREATE INDEX IF NOT EXISTS `host_idx`		ON %s(`host`)', $tbl));
	$db->do(sprintf('CREATE INDEX IF NOT EXISTS `group_idx`		ON %s(`group`)', $tbl));
	$db->do(sprintf('CREATE INDEX IF NOT EXISTS `start_time_idx`	ON %s(`start_time`)', $tbl));
	$db->do(sprintf('CREATE INDEX IF NOT EXISTS `end_time_idx`	ON %s(`end_time`)', $tbl));
	$db->do(sprintf('CREATE INDEX IF NOT EXISTS `family_idx`	ON %s(`family`)', $tbl));
	$db->do(sprintf('CREATE INDEX IF NOT EXISTS `proto_idx`		ON %s(`proto`)', $tbl));

	$db->disconnect();

	debug('initialised database');
}

#
# resolve a server name to IPv4 or IPv6 addresses, using a cached value
# if possible. this function will attempt to detect literal IPs to avoid
# doing a DNS lookup
#
sub resolve {
	my $name = lc(shift);
	my $family = shift || 4;

	my $type = (4 == $family ? 'A' : 'AAAA');

	if (($name =~ /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/ && 'A' eq $type) || ($name =~ /^[0-9a-f:]+$/i && 'AAAA' eq $type)) {
		#
		# Literal IP, just return it
		#
		return ($name);

	} else {
		if (!defined($CACHE->{$name}->{$type}) || $CACHE->{$name}->{$type}->{'expires'} < time()) {
			my $resolver = Net::DNS::Resolver->new;

			my $answer = $resolver->query($name.'.', $type);

			if ($answer) {
				#
				# start with a high value
				#
				my $minttl = ~0;

				my @addrs;
				foreach my $rr (grep { $type eq $_->type } $answer->answer) {
					#
					# add address to list
					#
					push(@addrs, $rr->address);

					#
					# reduce TTL if we see a lower
					# value
					#
					$minttl = $rr->ttl if ($rr->ttl < $minttl);
				}

				#
				# store address data (and expiry time)
				# in cache
				#
				$CACHE->{$name}->{$type} = {
					'addrs'   => \@addrs,
					'expires' => time() + $minttl,
				}

			} elsif (!defined($CACHE->{$name}->{$type})) {
				#
				# no answer and cache miss
				#
				$CACHE->{$name}->{$type} = {
					'addrs'   => [],
					'expires' => 0,
				}
			}
		}

		#
		# return whatever's in cache
		#
		return @{$CACHE->{$name}->{$type}->{'addrs'}};
	}
}

__END__

=pod

=head1 NAME

rdnsd is a remote DNS server monitoring system.

=head1 DESCRIPTION

C<rdnsd> can be used to monitor the availability and responsiveness of
remote DNS servers. Given a list of DNS servers, it will periodically
query each server and record whether a response was received, and how
quickly. This information can then be obtained by querying a database.

=head1 USAGE

	rdnsd [--help|--config=/etc/rdnsd/rdns.conf [--debug]]

=head1 OPTIONS

The following command line options are supported:

=over

=item * C<--help>

Display help text.

=item * C<--config=FILE>

Specify the configuration file. See L<CONFIGURATION FILE> for further
details. If not specified, C</etc/rdnsd/rdnsd.conf> is used.

=item * C<--debug>

Enable debug mode. C<rdnsd> will not daemonise and will emit debugging
information to STDERR.

=back

=head1 CONFIGURATION FILE

C<rdnsd> must be configured using a configuration file. The following
is an example:

	NodeID		my-node-id
	UpdateInterval	300
	PidFile		/var/run/rdnsd/rdnsd.pid
	Database	/var/run/rdnsd/rdnsd.db
	Percentile	95
	AddressFamily	4
	Loop		3
	Timeout		1
	Recurse		false
	Question	. A IN
	Servers		ns1.example.com,ns2.example.net
	Domains		example.com

The directives are explained below.

=head2 C<NodeID ID>

Default: C<$HOSTNAME>

This value is insterted into the `node_id` column of the stats database.
It disambiguates the source of each row, allowing data from multiple
monitoring nodes to be aggregated losslessly.

If not set, the system's host name is used.

=head2 C<UpdateInterval TIME>

Default: C<300>

This parameter tells C<rdnsd> to automatically update the statistics
database every C<TIME> seconds. This value B<MUST> be more than
C<Loop x Timeout> seconds, and B<SHOULD> be at least three times that
value.

=head2 C<PidFile /path/to/pid/file>

Default: C</var/run/rdnsd/rdnsd.pid>

The file where C<rdnsd> will write its pid.

=head2 C<Database FILE>

Default: none

The C<Database> directive can take two forms:

=over

=item * the path to an SQLite database on disk

=item * a L<DBI> DSN

=back

If the value of the C<Database> directive looks like a DSN (i.e.
it begins with C<dbi:>) then C<rdnsd> will use the authentication
credentials specified in by the C<DBUsername> and C<DBPassword>
directives.

On startup, C<rdnsd> will attempt to connect to the specified
database and will create the C<rdnsd> table. Because each RDBMS
has its own syntax for creating tables, only SQLite and MySQL
databases are currently supported (support for other databases
is easy to add, so submit a patch!)

The database will contain a single table, which will contain the
following columns. The name of the table is determined by the
C<DBTable> directive.

=over

=item * C<id> - unique row ID

=item * C<node_id> - node ID/hostname

=item * C<start_time> - date+time the monitoring interval began (in the
system's configured time zone)

=item * C<ends_time> - date+time the monitoring interval ended (in the
system's configured time zone)

=item * C<host> - server name

=item * C<group> - the group to which the server belongs

=item * C<family> - IP version (4 or 6)

=item * C<proto> - transport protocol (UDP or TCP)

=item * C<count> - number of queries sent to the server

=item * C<success> - number of successful queries

=item * C<rate> - response rate as a decimal between 0 and 1 (equivalent
to C<success / rate>)

=item * C<min_time> - lowest observed RTT in milliseconds

=item * C<time> - average RTT in milliseconds

=item * C<time> - highest observed RTT in milliseconds

=item * C<percentile_time> - average RTT in milliseconds at the
configured percentile.

=back

=head2 C<DBUsername USERNAME>

Default: none

Specifies the username for database authentication.

=head2 C<DBPassword PASSWORD>

Default: none

Specifies the password for database authentication.

=head2 C<DBTable TABLE>

Default: C<rdnsd>

Specifies the name of the table that C<rdnsd> will use.

=head2 C<Percentile PERCENTILE>

Default: none

If this option is set, C<rdnsd> will calculate the response time at the
given percentile.

=head2 C<AddressFamily (4|6)>

Default: C<4>

Specifies whether to prefer IPv4 or IPv6 when talking to nameservers, if
the servers are identified by name rather than address (or when loaded
from SRV records). If not defined, the default behaviour is to prefer
IPv4.

=head2 C<Loop SECONDS>

Default: C<3>

This specifies the length of the main loop. If this is set to 2, then
each server will be checked every 2 seconds. This value can be a decimal
fraction, eg 0.25.

=head2 C<Timeout SECONDS>

Default: C<1>

This specifies the timeout for DNS queries. A server will be considered
down if it does not respond within this amount of time. This value
B<MUST> be less than the value of C<Loop>.

=head2 C<Recurse (true|false)>

Default: C<false>

Enable recursion (i.e. set the C<rd> bit on the queries sent to servers).

=head2 C<Question QUESTION>

Default: C<example.com. IN A>

Specify the DNS question. The format is C<QNAME QCLASS QTYPE>.

=head2 C<ResponseCode RCODE>

Default: none

Specify the expected RCODE. If the RCODE does not match the server is
assumed to be down. If no value is specified, any RCODE will be
accepted.

=head2 C<Servers SERVERS>

Default: none

A comma-separated list of servers to be checked. You can either specify
a server name (which will be resolved to a set of IP addresses), or
literal IPv4 or IPv6 addresses.

This directive can't be used at the same time as the C<Domains>
directive.

=head2 C<Domains DOMAINS>

Default: none

Rather than specifying a list of nameservers, you can provide a list of
domains instead. For each domain, C<rdnsd> will query for C<SRV> records
for C<_dns._udp> under the domain and use the targets of any C<SRV>
records returned.

The server list will be updated when the TTL on the C<SRV> records
expires.

This directive can't be used at the same time as the C<Servers>
directive.

=head2 C<StatsFile /path/to/stats/file>

Default: none

This is a B<deprecated> option which provides backwards compatibility
with older versions of C<rdnsd>. It specifies a file to which C<rdnsd>
will write statistics.

See L<LEGACY STATISTICS FILE FORMAT> for further information.

=head2 C<Protocol (udp|tcp)>

Default: C<udp>

This is a B<deprecated> option which provides backwards compatibility
with older versions of C<rdnsd>. It specifies the transport protocol
for which stats will be written to the statistics file (C<rdnsd> will
still monitor both UDP and TCP and will write stats for both protocols
to the database).

=head1 RELOADING THE CONFIGURATION FILE

C<rdnsd> will reload its configuration if you send it a C<SIGHUP>:

	$ kill -HUP `cat /path/to/pid/file`

=head1 OBTAINING STATISTICS

Every C<UpdateInterval> seconds, C<rdnsd> will write stats to the
database specified by C<Database>, and, if set, the file specified by
C<StatsFile>.

=head2 LEGACY STATISTICS FILE FORMAT

Older versions of C<rdnsd> used a flat file format for statistics, which
would be updated every C<UpdateInterval> seconds, or when C<rdnsd>
received the C<USR1> signal. This behaviour is now deprecated in favour
of a database, but is still supported for backwards compatibility.

The statistics file will contain one line for each server. Each line
contains the nameserver checked, the response rate as a decimal
fraction, and the average response time (in milliseconds), for example:

	ns0.example.com 1.00 25

If the C<Percentile> option is set in the config file (or the
C<--percentile> argument was given), an additional value will appear at
the end of the line:

	ns0.example.com 1.00 25 36

This value is the response time (in milliseconds) at the given
percentile.

=head1 SEE ALSO

=over

=item * L<https://www.centralnic.com/>

=item * L<http://www.net-dns.org/>

=back

=head1 COPYRIGHT

C<rdnsd> is Copyright 2019 CentralNic Ltd. All rights reserved. This
program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut
