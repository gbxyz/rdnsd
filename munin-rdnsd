#!/usr/bin/perl
# Copyright 2013 CentralNic Ltd. This program is free software; you can
# redistribute it and/or modify it under the same terms as Perl itself.
use Net::DNS;
use Config::Simple;
use strict;

# to use this plugin, symlink it to /etc/munin/plugins/rdnds_(rate|time)_(udp|tcp)
# you'll need to multiple symlinks if you want to monitor rate and time or UDP
# and TCP

my (undef, $mode, $proto) = split(/_/, $0, 4);

# this plugin assumes that you have a config file here:
my @files = (
	"/etc/rdnsd/rdnsd_$proto.conf",
	"/etc/rdnsd/rdnsd.conf",
);
my $config;
foreach my $file (@files) {
	if (-e $file) {
		$config = Config::Simple->new($file);
		last;
	}
}

die("unhandled mode '$mode'") if ($mode ne 'rate' && $mode ne 'time');

my $pidfile = $config->param('PidFile');
my $statsfile = $config->param('StatsFile');

my $servers	= $config->param('Servers');
my $domains	= $config->param('Domains');

my @servers;
if ($servers && $domains) {
	die("Both Servers and Domains are present in config (or were provided as arguments): please choose one or the other");

} elsif ($servers) {
	 if (ref($servers) eq 'ARRAY') {
                @servers = @{$servers};
        } else {
                @servers = split(/\s*,\s*/, $servers);
        }

} else {
	my $resolver = Net::DNS::Resolver->new;
	my @domains = ('ARRAY' eq ref($domains) ? @{$domains} : split(/\s*,\s*/, $domains));
	foreach my $domain (@domains) {
		my $answer = $resolver->query('_dns._udp.'.$domain, 'SRV');
		if ($answer) {
			foreach my $rr (grep { 'SRV' eq $_->type } $answer->answer) {
				push(@servers, $rr->target);
			}
		}
	}
}

die("no servers found") if (scalar(@servers) < 1);

if ($ARGV[0] eq 'config') {
	print "graph_category DNS\n";

	if ($mode eq 'time') {
		printf("graph_title Query Response Time %s\ngraph_vlabel Milliseconds\n", uc($proto));

	} elsif ($mode eq 'rate') {
		printf("graph_title Query Response Rate (%s)\ngraph_vlabel Response Rate\ngraph_args --upper-limit 1 -l 0\n", uc($proto));

	}

	foreach my $server (@servers) {
		my $name = $server;
		$name =~ s/\./_/g;
		$name =~ s/\-/_/g;
		printf("%s.label %s\n", $name, $server);
	}

	exit;
}

# don't signal the daemon if the stats file is less than 60s old:
# otherwise the quality of the statistics will be poor
if (time() - (stat($statsfile))[9] > 60) {
	die("Error opening '$pidfile': $!") if (!open(PIDFILE, $pidfile));
	chomp(my $pid = <PIDFILE>);
	close(PIDFILE);

	die("No processes signalled") if (kill('USR1', $pid) < 1);

	sleep(1);
}

die("Error opening '$statsfile': $!") if (!open(FILE, $statsfile));

while (<FILE>) {
	chomp;
	my ($server, $rate, $time) = split(/ /, $_);
	next if (scalar(grep { $server eq $_ } @servers) < 1);

	my $name = $server;
	$name =~ s/\./_/g;
	$name =~ s/\-/_/g;
	printf("%s.value %s\n", $name, ($mode eq 'time' ? $time : $rate));
}

close(FILE);

exit;
