#!/usr/bin/perl
# Copyright 2013 CentralNic Ltd. This program is free software; you can
# redistribute it and/or modify it under the same terms as Perl itself.
use Config::Simple;
use File::Basename qw(basename);
use Net::DNS;
use strict;

#
# to use this plugin, symlink it to /etc/munin/plugins/rdnsd_(rate|time)_(udp|tcp)[_(ipv4|ipv6)]
#
# you'll need to multiple symlinks if you want to monitor multiple metrics, for example:
#
#	/etc/munin/plugins/rdnsd_rate_udp
#	/etc/munin/plugins/rdnsd_rate_tcp
#	/etc/munin/plugins/rdnsd_time_udp
#	/etc/munin/plugins/rdnsd_time_udp_ipv4 (etc)
#

my (undef, $mode, $proto, $family) = split(/_/, basename($0), 4);

die("invalid mode '$mode'") if ($mode !~ /^(rate|time)$/);

#
# construct a list of possible config files based on protocol/family
#
my @files;
if ($family) {
	#
	# explicit IP version specified
	#
	if ($family !~ /^ipv(4|6)$/) {
		die("invalid family '$family'");

	} else {
		@files = (
			sprintf('/etc/rdnsd/rdnsd_%s_%s.conf', $proto, $family),
			sprintf('/etc/rdnsd/rdnsd_%s.conf', $family),
		);
	}

} else {
	@files = (
		sprintf('/etc/rdnsd/rdnsd_%s.conf', $proto),
		'/etc/rdnsd/rdnsd.conf',
	);
}

#
# look for a config file:
#
my $config;
foreach my $file (@files) {
	if (-e $file) {
		$config = Config::Simple->new($file);
		last;
	}
}

die("Cannot find configuration file") unless ($config);

my $pidfile	= $config->param('PidFile');
my $statsfile	= $config->param('StatsFile');
my $servers	= $config->param('Servers');
my $domains	= $config->param('Domains');
my $family	= $config->param('AddressFamily');
my $update	= $config->param('UpdateInterval');
my $timeout	= $config->param('Timeout') || 1;

my ($warning, $critical);
if ('rate' eq $mode) {
	$warning  = sprintf('%f:1', $config->param('WarningRate')  || 0.95);
	$critical = sprintf('%f:1', $config->param('CriticalRate') || 0.90);

} else {
	$warning  = sprintf('0:%f', $config->param('WarningTime')  || ('tcp' eq $proto ? 500  : 1000));
	$critical = sprintf('0:%f', $config->param('CriticalTime') || ('tcp' eq $proto ? 1500 : 3000));

}

my @servers;
if ($servers && $domains) {
	die("Both 'Servers' and 'Domains' are present in the config file: please choose one or the other");

} elsif ($servers) {
	if (ref($servers) eq 'ARRAY') {
                @servers = @{$servers};

        } else {
                @servers = split(/\s*,\s*/, $servers);

        }

} else {
	my $resolver = Net::DNS::Resolver->new;
	my @domains = ('ARRAY' eq ref($domains) ? @{$domains} : split(/\s*,\s*/, $domains));
	foreach my $domain (@domains) {
		my $answer = $resolver->query('_dns._udp.'.$domain, 'SRV');
		if ($answer) {
			foreach my $rr (grep { 'SRV' eq $_->type } $answer->answer) {
				push(@servers, $rr->target);
			}
		}
	}
}

die("no servers found") if (scalar(@servers) < 1);

if ($ARGV[0] eq 'config') {
	print "graph_category DNS\n";

	my $fmt;
	if ('time' eq $mode) {
		$fmt =	"graph_title Query Response Time (%s)\n".
			"graph_vlabel Response Time (ms)\n";

	} elsif ('rate' eq $mode) {
		$fmt =	"graph_title Query Response Rate (%s)\n".
			"graph_vlabel Response Rate\ngraph_args --upper-limit 1 -l 0\n";

	}

	printf($fmt, ($family ? sprintf('IPv%d', substr($family, 3), uc($proto)) : uc($proto)));

	foreach my $server (@servers) {
		my $name = $server;
		$name =~ s/\./_/g;
		$name =~ s/\-/_/g;
		printf("%s.label %s\n", $name, $server);
		printf("%s.warning %s\n", $name, $warning);
		printf("%s.critical %s\n", $name, $critical);
	}

	exit;
}

if (!$update) {
	#
	# no UpdateInterval is defined in the configuration, so we need to send
	# the USR1 signal to rdnsd.
	#
	# to ensure good statistics, we calculate the maximum acceptable age of the
	# log file, based on the number of servers, the timeout, and a reasonable
	# number of data points.
	#
	# if you have a lot of servers, you probably want to configure
	# UpdateInterval to ensure reliable stats.
	#
	my $maxage = scalar(@servers) * $timeout * 3;

	if (time() - (stat($statsfile))[9] > $maxage) {
		die("Error opening '$pidfile': $!") if (!open(PIDFILE, $pidfile));
		chomp(my $pid = <PIDFILE>);
		close(PIDFILE);

		die("No processes signalled") if (kill('USR1', $pid) < 1);

		# now we need to sleep to allow rdnsd to complete its current
		# loop and update the stats file:
		sleep(1 + $maxage);
	}
}

die("Error opening '$statsfile': $!") if (!open(FILE, $statsfile));

while (<FILE>) {
	chomp;
	my ($server, $rate, $time) = split(/ /, $_);
	next if (scalar(grep { $server eq $_ } @servers) < 1);

	my $name = $server;
	$name =~ s/\./_/g;
	$name =~ s/\-/_/g;
	printf("%s.value %s\n", $name, ($mode eq 'time' ? $time : $rate));
}

close(FILE);

exit;
